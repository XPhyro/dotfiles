#!/usr/bin/env sh

loginfo() {
    printf "%s%s\n" "$logprefix" "$*" >&2
}

logwarn() {
    printf "\033[1;33m%s%s\n\033[0m" "$logprefix" "$*" >&2
}

logerr() {
    printf "\033[0;31m%s%s\n\033[0m" "$logprefix" "$*" >&2
}

logerrq() {
    logerr "$*, exiting."
    exit 1
}

setsensitivity() {
    case "$execdir" in
        "$dotdirs") sensitive=1;;
        "$dotdir" ) sensitive=0;;
        *         ) logerrq "Execution directory is incorrect";;
    esac
}

issensitive() {
    [ "$sensitive" = 1 ]
}

cdsafe() {
    cd "$*" || logerrq "Could not cd to $*"
}

lnsafe() {
    ln "$@" || logerr '----`ln '"$*"'` failed.'
}

mvsafe() {
    mv "$@" || logerr '----`mv '"$*"'` failed.'
}

dotdir="$HOME/.dotfiles"
dotdirs="$HOME/.dotfiles-sensitive"
dotlistfl="dotfiles.list"
dotlistfls="dotfiles-sensitive.list"
dotlistpac="pac.list"
dotlck=".backup.lck"
execname="${0##*/}"
execdir="$(realpath -P "${0%/*}")"

setsensitivity

if issensitive; then
    mkdir -- "$dotdirs/$dotlck" || logerrq "Could not acquire lock"
    basedir="$dotdirs"
    listfl="$dotlistfls"
    listflother="$dotdir/$dotlistfl"
    logprefix="[BACKUP-SENSITIVE]: "

    loginfo "Initiating non-sensitive backup."
    "$dotdir/backup" || logerrq "Non-sensitive backup failed"
else
    # [ -d "$dotdirs/$dotlckdirs" ] || logerrq "Non-sensitive backup must be initiated by sensitive backup"
    mkdir -- "$dotdir/$dotlck" || logerrq "Could not acquire lock"
    basedir="$dotdir"
    listfl="$dotlistfl"
    listflother="$dotdirs/$dotlistfls"
    logprefix="[BACKUP]: "
fi

cdsafe "$basedir"
pwd

[ -f "$listfl" ] || logerrq "No list file"

loginfo "Preprocessing $listfl."

sed -i "s|^~|$HOME|" -- "$listfl"
sort -V -o "$listfl" -- "$listfl"

loginfo "Parsing $listflother."
otherlist="$(xargs -r -d '\n' -n 1 realpath -P -- < "$listflother")"

loginfo "Processing $listfl."

while IFS= read -r srcfl; do
    loginfo "--Processing $srcfl."
    
    realsrcfl="$(realpath -P -- "$srcfl")"
    printf "%s\n" "$otherlist" | grep -Fxq "$realsrcfl" && logwarn "----File exists in $listflother, continuing."

    targetfl="root$srcfl"
    [ "${realsrcfl##"$basedir/"}" = "$targetfl" ] && {
        loginfo "----Nothing to do, ignoring."
        continue
    }

    realtargetfl="$(realpath -- "$targetfl")"
    if ! stat -- "$srcfl" > /dev/null 2>&1; then
        if [ ! -e "$targetfl" ]; then
            logwarn "----Source and target files do not exist, ignoring."
        else
            logwarn "----Source file does not exist but target does, linking."
            lnsafe -s -- "$targetfl" "$srcfl"
        fi
    elif [ -e "$targetfl" ]; then
        if [ ! -e "$srcfl" ]; then
            logwarn "----Source file exists but is a broken symlink, fixing."
            lnsafe -sf -- "$realtargetfl" "$srcfl"
        else
            logerr "----Source and target files exist but are not related, manual intervention needed."
        fi
    else
        logwarn "----Source file exists but target does not, moving and linking."
        mvsafe -- "$srcfl" "$targetfl"
        lnsafe -s -- "$realtargetfl" "$srcfl"
    fi
done < "$listfl"

if issensitive; then
    loginfo "Creating package list."
    if command -v pacman > /dev/null 2>&1; then
        if command -v yay > /dev/null 2>&1; then
            loginfo "--Found yay."
            yay -Q > "$dotlistpac"
        else
            loginfo "--Found pacman."
            pacman -Q > "$dotlistpac"
        fi
    else
        logwarn "Could not find pacman, aborting creation of package list."
    fi
else
    loginfo "Updating .gitignore."
    cp -f -- "$listflother" .gitignore
    printf ".gitignore\n" >> .gitignore
fi

loginfo "Committing changes."

git add . > /dev/null 2>&1
git remote update > /dev/null 2>&1

if [ -n "$(git status -uno -s)" ]; then
    git pull > /dev/null 2>&1
    # TODO: Change the author.
    git commit -m "#$(($(git rev-list --all --count) + 1)): Automatic commit by $execname." > /dev/null 2>&1
    git push > /dev/null 2>&1 || logwarn '`git push` failed.'
else
    loginfo "No changes to commit."
fi

loginfo "Releasing lock."

if [ -d "$basedir/$dotlck" ]; then
    rm -rf -- "$basedir/$dotlck"
else
    logwarn "Lock was forcefully released during execution."
fi

loginfo "Done."
exit 0
